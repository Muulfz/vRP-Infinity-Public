---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Muulfz.
--- DateTime: 12/7/2020 10:59 PM
---

local htmlEntities = module("lib/htmlEntities")

RegisterCommand(vRP.lang.commands.admin.kick.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local target_id = parseInt(args[1])
    vRP.admin_kick(user_id, target_id, vRP.lang.commands.admin.kick.reason_default)
end)

RegisterCommand(vRP.lang.commands.admin.coords.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local x, y, z = vRP.admin_coords(user_id)
    local lang = vRP.lang.commands.admin.coords.description

    vRP.prompt(source,tostring(lang),x..","..y..","..z)
end)

RegisterCommand(vRP.lang.commands.admin.revive.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local target_id = parseInt(args[1])
    vRP.admin_revive(user_id, target_id)
end)

RegisterCommand(vRP.lang.commands.admin.noclip.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local target_id = parseInt(args[1])
    vRP.admin_no_clip(user_id, target_id)
end)

RegisterCommand(vRP.lang.commands.admin.set_money.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local id = tonumber(args[1])
    local moneyType = args[2]
    local value = tonumber(args[3])

    if type(value) == "number" and type(id) == "number" then
        if moneyType == tostring(vRP.lang.money.types.bank) or moneyType == tostring(vRP.lang.money.types.wallet) then
            vRP.admin_set_money(user_id, id, moneyType, value)
        end
        --invalid type
    end
end)

RegisterCommand(vRP.lang.commands.admin.remove_group.cmd, function(source, args, rawCommand)
    local user_id = vRP.getUserId(source)
    local id = tonumber(args[1])
    local group = tostring(args[2])

    vRP.admin_remove_group(user_id, id, group)
end)

--TODO: Refactor this below

RegisterCommand(vRP.lang.commands.admin.add_group.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id ~= nil and vRP.hasPermission(user_id, permissions.admin.group_add) then
        local id = vRP.prompt(player, "User id: ", "")
        id = parseInt(id)
        local group = vRP.prompt(player, "Group to add: ", "")
        if group then
            vRP.addUserGroup(id, group)
            vRPclient._notify(player, group .. " added to user " .. id)
        end
    end
end)

RegisterCommand("admin_remove_group_legacy", function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id and vRP.hasPermission(user_id, permissions.admin.remove_group) then
        local id = vRP.prompt(player, "User id: ", "")
        id = parseInt(id)
        local group = vRP.prompt(player, "Group to remove: ", "")
        if group then
            vRP.removeUserGroup(id, group)
            vRPclient._notify(player, group .. " removed from user " .. id)
        end
    end
end)

RegisterCommand(vRP.lang.commands.admin.ban.cmd, function(source,args,rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id and vRP.hasPermission(user_id, permissions.admin.ban) then
        local id = vRP.prompt(player, "User id to ban: ", "")
        id = parseInt(id)
        local reason = vRP.prompt(player, "Reason: ", "")
        local source = vRP.getUserSource(id)
        if source then
            vRP.ban(source, reason)
            vRPclient._notify(player, "banned user " .. id)
        end
    end
end)

RegisterCommand(vRP.lang.commands.admin.unban.cmd, function(source, args, rawCommand)
   local player = source
    local user_id = vRP.getUserId(player)
    if user_id and vRP.hasPermission(user_id, permissions.admin.unban) then
        local id = vRP.prompt(player, "User id to unban: ", "")
        id = parseInt(id)
        vRP.setBanned(id, false)
        vRPclient._notify(player, "un-banned user " .. id)
    end
end)

RegisterCommand(vRP.lang.commands.admin.custom_emote.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id and vRP.hasPermission(user_id, permissions.admin.custom_emote) then
        local content = vRP.prompt(player, "Animation sequence ('dict anim optional_loops' per line): ", "")
        local seq = {}
        for line in string.gmatch(content, "[^\n]+") do
            local args = {}
            for arg in string.gmatch(line, "[^%s]+") do
                table.insert(args, arg)
            end

            table.insert(seq, { args[1] or "", args[2] or "", args[3] or 1 })
        end

        vRPclient._playAnim(player, true, seq, false)
    end
end)

RegisterCommand(vRP.lang.commands.admin.custom_sound.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id and vRP.hasPermission(user_id, permissions.admin.custom_sound) then
        local content = vRP.prompt(player, "Sound 'dict name': ", "")
        local args = {}
        for arg in string.gmatch(content, "[^%s]+") do
            table.insert(args, arg)
        end
        vRPclient._playSound(player, args[1] or "", args[2] or "")
    end
end)


RegisterCommand(vRP.lang.commands.admin.teleport_to.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.prompt(player, "User id:", "")
    local tplayer = vRP.getUserSource(tonumber(user_id))
    if tplayer then
        vRPclient._teleport(player, vRPclient.getPosition(tplayer))
    end
end)

RegisterCommand(vRP.lang.commands.admin.teleport_to_me.cmd, function(source, args, rawCommand)
    local player = source
    local x, y, z = vRPclient.getPosition(player)
    local user_id = vRP.prompt(player, "User id:", "")
    local tplayer = vRP.getUserSource(tonumber(user_id))
    if tplayer then
        vRPclient._teleport(tplayer, x, y, z)
    end
end)

RegisterCommand(vRP.lang.commands.admin.teleport_to_coords.cmd, function(source, args, rawCommand)
    local player = source
    local fcoords = vRP.prompt(player, "Coords x,y,z:", "")
    local coords = {}
    for coord in string.gmatch(fcoords or "0,0,0", "[^,]+") do
        table.insert(coords, tonumber(coord))
    end

    vRPclient._teleport(player, coords[1] or 0, coords[2] or 0, coords[3] or 0)
end)

RegisterCommand(vRP.lang.commands.admin.give_money.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id then
        local amount = vRP.prompt(player, "Amount:", "")
        amount = parseInt(amount)
        vRP.giveMoney(user_id, amount)
    end
end)

RegisterCommand(vRP.lang.commands.admin.give_item.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id then
        local idname = vRP.prompt(player, "Id name:", "")
        idname = idname or ""
        local amount = vRP.prompt(player, "Amount:", "")
        amount = parseInt(amount)
        vRP.giveInventoryItem(user_id, idname, amount, true)
    end
end)

RegisterCommand(vRP.lang.commands.admin.call_admin.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)

    if user_id then
        local desc = vRP.prompt(player, "Describe your problem:", "") or ""
        local answered = false
        local players = {}
        for k, v in pairs(vRP.rusers) do
            local player = vRP.getUserSource(tonumber(k))
            -- check user
            if vRP.hasPermission(k, "admin.tickets") and player then
                table.insert(players, player)
            end
        end

        -- send notify and alert to all listening players
        for k, v in pairs(players) do
            async(function()
                local ok = vRP.request(v,
                                       "Admin ticket (user_id = " .. user_id .. ") take/TP to ?: " .. htmlEntities.encode(desc),
                                       60)
                if ok then
                    -- take the call
                    if not answered then
                        -- answer the call
                        vRPclient._notify(player, "An admin took your ticket.")
                        vRPclient._teleport(v, vRPclient.getPosition(player))
                        answered = true
                    else
                        vRPclient._notify(v, "Ticket already taken.")
                    end
                end
            end)
        end
    end
end)

RegisterCommand(vRP.lang.commands.admin.give_item.cmd, function(source, args, rawCommand)
    local player = source
    local user_id = vRP.getUserId(player)
    if user_id then
        local idname = vRP.prompt(player, "Id name:", "")
        idname = idname or ""
        local amount = vRP.prompt(player, "Amount:", "")
        amount = parseInt(amount)
        vRP.giveInventoryItem(user_id, idname, amount, true)
    end
end)

local player_customs = {}

RegisterCommand(vRP.lang.commands.admin.display_custom.cmd, function (source, args, rawCommand)
    local player = source
    local custom = vRPclient.getCustomization(player)
    if player_customs[player] then
        -- hide
        player_customs[player] = nil
        vRPclient._removeDiv(player, "customization")
    else
        -- show
        local content = ""
        for k, v in pairs(custom) do
            content = content .. k .. " => " .. json.encode(v) .. "<br />"
        end

        player_customs[player] = true
        vRPclient._setDiv(player, "customization",
                          ".div_customization{ margin: auto; padding: 8px; width: 500px; margin-top: 80px; background: black; color: white; font-weight: bold; ",
                          content)
    end
end)

RegisterCommand(vRP.lang.commands.admin.audio_source.cmd, function(source, args, rawCommand)
    local player = source
    local infos = splitString(vRP.prompt(player, "Audio source: name=url, omit url to delete the named source.", ""),
                              "=")
    local name = infos[1]
    local url = infos[2]

    if name and string.len(name) > 0 then
        if url and string.len(url) > 0 then
            local x, y, z = vRPclient.getPosition(player)
            vRPclient._setAudioSource(-1, "vRP:admin:" .. name, url, 0.5, x, y, z, 125)
        else
            vRPclient._removeAudioSource(-1, "vRP:admin:" .. name)
        end
    end
end)